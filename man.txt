DESCRIPTION
       As of Xcode 8.0 the default nm(1) tool is llvm-nm(1).  They for the most part have the same options except for -f and -s which the
       differences are noted below.  More help on options for llvm-nm(1) is provided when running it with the --help option.

       Nm displays the name list (symbol table) of each object file in the argument list.  If an argument is an archive,  a  listing  for
       each  object file in the archive will be produced.  File can be of the form libx.a(x.o), in which case only symbols from that mem-
       ber of the object file are listed.  (The parentheses have to be quoted to get by the shell.)  If no file is given, the symbols  in
       a.out are listed.

       Each symbol name is preceded by its value (blanks if undefined).  Unless the -m option is specified, this value is followed by one
       of the following characters, representing the symbol type: U (undefined), A (absolute), T (text section symbol), D  (data  section
       symbol),  B  (bss  section symbol), C (common symbol), - (for debugger symbol table entries; see -a below), S (symbol in a section
       other than those above), or I (indirect symbol).  If the symbol is local (non-external), the symbol's type is instead  represented
       by  the  corresponding  lowercase letter.  A lower case u in a dynamic shared library indicates a undefined reference to a private
       external in another module in the same library.

       If the symbol is a Objective C method, the symbol name is +-[Class_name(category_name) method:name:], where `+' is for class meth-
       ods, `-' is for instance methods, and (category_name) is present only when the method is in a category.

       The output is sorted alphabetically by default.

       Options are:

       -a     Display all symbol table entries, including those inserted for use by debuggers.

       -g     Display only global (external) symbols.

NM(1)                                                                                                                               NM(1)

NAME
       nm - display name list (symbol table)

SYNOPSIS
       llvm-nm [ -agnoprumxjlPA ] [ - ] [ -t format ] [[ -arch arch_flag ]...] [ file ... ] [ -s segname sectname ]

       nm-classic [ -agnoprumxjlfPA [ s segname sectname ]] [ - ] [ -t format ] [[ -arch arch_flag ]...] [ file ... ]

DESCRIPTION
       As of Xcode 8.0 the default nm(1) tool is llvm-nm(1).  They for the most part have the same options except for -f and -s which the
       differences are noted below.  More help on options for llvm-nm(1) is provided when running it with the --help option.

       Nm displays the name list (symbol table) of each object file in the argument list.  If an argument is an archive,  a  listing  for
       each  object file in the archive will be produced.  File can be of the form libx.a(x.o), in which case only symbols from that mem-
       ber of the object file are listed.  (The parentheses have to be quoted to get by the shell.)  If no file is given, the symbols  in
       a.out are listed.

       Each symbol name is preceded by its value (blanks if undefined).  Unless the -m option is specified, this value is followed by one
       of the following characters, representing the symbol type: U (undefined), A (absolute), T (text section symbol), D  (data  section
       symbol),  B  (bss  section symbol), C (common symbol), - (for debugger symbol table entries; see -a below), S (symbol in a section
       other than those above), or I (indirect symbol).  If the symbol is local (non-external), the symbol's type is instead  represented
       by  the  corresponding  lowercase letter.  A lower case u in a dynamic shared library indicates a undefined reference to a private
       external in another module in the same library.

       If the symbol is a Objective C method, the symbol name is +-[Class_name(category_name) method:name:], where `+' is for class meth-
       ods, `-' is for instance methods, and (category_name) is present only when the method is in a category.

       The output is sorted alphabetically by default.

       Options are: